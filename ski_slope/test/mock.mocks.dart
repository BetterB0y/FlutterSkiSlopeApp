// Mocks generated by Mockito 5.2.0 from annotations
// in ski_slope/test/mock.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:event_bus/event_bus.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ski_slope/data/api/auth_api.dart' as _i7;
import 'package:ski_slope/data/api/mixin_api.dart' as _i10;
import 'package:ski_slope/data/api/model/response.dart' as _i2;
import 'package:ski_slope/data/api/ski_lift_api.dart' as _i12;
import 'package:ski_slope/data/api/ticket_api.dart' as _i14;
import 'package:ski_slope/data/api/user_api.dart' as _i11;
import 'package:ski_slope/data/api/voucher_api.dart' as _i13;
import 'package:ski_slope/data/model/auth_data.dart' as _i6;
import 'package:ski_slope/data/model/result/result.dart' as _i3;
import 'package:ski_slope/data/model/ski_lift_data.dart' as _i17;
import 'package:ski_slope/data/model/ticket_data.dart' as _i21;
import 'package:ski_slope/data/model/user_data.dart' as _i5;
import 'package:ski_slope/data/model/voucher_data.dart' as _i19;
import 'package:ski_slope/data/repository/ski_lift_repository.dart' as _i16;
import 'package:ski_slope/data/repository/ticket_repository.dart' as _i20;
import 'package:ski_slope/data/repository/user_repository.dart' as _i15;
import 'package:ski_slope/data/repository/voucher_repository.dart' as _i18;
import 'package:ski_slope/settings/settings.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeResult_1 extends _i1.Fake implements _i3.Result {}

class _FakeDataResult_2<T> extends _i1.Fake implements _i3.DataResult<T> {}

/// A class which mocks [Settings].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettings extends _i1.Mock implements _i4.Settings {
  MockSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set username(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#username, value), returnValueForMissingStub: null);

  @override
  set email(dynamic value) => super.noSuchMethod(Invocation.setter(#email, value), returnValueForMissingStub: null);

  @override
  set firstName(String? value) =>
      super.noSuchMethod(Invocation.setter(#firstName, value), returnValueForMissingStub: null);
  @override
  set lastName(String? value) =>
      super.noSuchMethod(Invocation.setter(#lastName, value), returnValueForMissingStub: null);
  @override
  set userData(_i5.UserData? user) =>
      super.noSuchMethod(Invocation.setter(#userData, user), returnValueForMissingStub: null);
  @override
  set accessToken(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#accessToken, value), returnValueForMissingStub: null);
  @override
  set refreshToken(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#refreshToken, value), returnValueForMissingStub: null);
  @override
  set tokenExpiryDate(int? value) =>
      super.noSuchMethod(Invocation.setter(#tokenExpiryDate, value), returnValueForMissingStub: null);
  @override
  set refreshExpiryDate(int? value) =>
      super.noSuchMethod(Invocation.setter(#refreshExpiryDate, value), returnValueForMissingStub: null);

  @override
  bool get isTokenExpired => (super.noSuchMethod(Invocation.getter(#isTokenExpired), returnValue: false) as bool);

  @override
  bool get isRefreshTokenExpired =>
      (super.noSuchMethod(Invocation.getter(#isRefreshTokenExpired), returnValue: false) as bool);
  @override
  set authResponseData(_i6.AuthData? auth) =>
      super.noSuchMethod(Invocation.setter(#authResponseData, auth), returnValueForMissingStub: null);
}

/// A class which mocks [AuthApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApi extends _i1.Mock implements _i7.AuthApi {
  MockAuthApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get bearerToken => (super.noSuchMethod(Invocation.getter(#bearerToken), returnValue: '') as String);
  @override
  _i8.Future<_i2.Response> login(String? userName, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [userName, password]),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> refresh(String? refreshToken) =>
      (super.noSuchMethod(Invocation.method(#refresh, [refreshToken]),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  void init(_i4.Settings? settings, _i9.EventBus? eventBus) =>
      super.noSuchMethod(Invocation.method(#init, [settings, eventBus]), returnValueForMissingStub: null);
  @override
  _i8.Future<_i2.Response> get(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> post(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          dynamic body,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #body: body,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
}

/// A class which mocks [UserApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApi extends _i1.Mock implements _i11.UserApi {
  MockUserApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get bearerToken => (super.noSuchMethod(Invocation.getter(#bearerToken), returnValue: '') as String);

  @override
  _i8.Future<_i2.Response> getUserInfo() => (super.noSuchMethod(Invocation.method(#getUserInfo, []),
      returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);

  @override
  _i8.Future<_i2.Response> registerUser(Map<String, dynamic>? newUserData) =>
      (super.noSuchMethod(Invocation.method(#registerUser, [newUserData]),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  void init(_i4.Settings? settings, _i9.EventBus? eventBus) =>
      super.noSuchMethod(Invocation.method(#init, [settings, eventBus]), returnValueForMissingStub: null);
  @override
  _i8.Future<_i2.Response> get(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> post(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          dynamic body,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #body: body,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
}

/// A class which mocks [SkiLiftApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSkiLiftApi extends _i1.Mock implements _i12.SkiLiftApi {
  MockSkiLiftApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get bearerToken => (super.noSuchMethod(Invocation.getter(#bearerToken), returnValue: '') as String);

  @override
  _i8.Future<_i2.Response> getSkiLifts() => (super.noSuchMethod(Invocation.method(#getSkiLifts, []),
      returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);

  @override
  void init(_i4.Settings? settings, _i9.EventBus? eventBus) =>
      super.noSuchMethod(Invocation.method(#init, [settings, eventBus]), returnValueForMissingStub: null);
  @override
  _i8.Future<_i2.Response> get(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> post(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          dynamic body,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #body: body,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
}

/// A class which mocks [VoucherApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockVoucherApi extends _i1.Mock implements _i13.VoucherApi {
  MockVoucherApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get bearerToken => (super.noSuchMethod(Invocation.getter(#bearerToken), returnValue: '') as String);

  @override
  _i8.Future<_i2.Response> getVouchers() => (super.noSuchMethod(Invocation.method(#getVouchers, []),
      returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);

  @override
  void init(_i4.Settings? settings, _i9.EventBus? eventBus) =>
      super.noSuchMethod(Invocation.method(#init, [settings, eventBus]), returnValueForMissingStub: null);
  @override
  _i8.Future<_i2.Response> get(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> post(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          dynamic body,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #body: body,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
}

/// A class which mocks [TicketApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicketApi extends _i1.Mock implements _i14.TicketApi {
  MockTicketApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get bearerToken => (super.noSuchMethod(Invocation.getter(#bearerToken), returnValue: '') as String);

  @override
  _i8.Future<_i2.Response> getTicketById(int? id) => (super.noSuchMethod(Invocation.method(#getTicketById, [id]),
      returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);

  @override
  void init(_i4.Settings? settings, _i9.EventBus? eventBus) =>
      super.noSuchMethod(Invocation.method(#init, [settings, eventBus]), returnValueForMissingStub: null);
  @override
  _i8.Future<_i2.Response> get(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> post(
          {String? url,
          _i10.ResponseMapper? mapper,
          bool? shouldAuthorize = true,
          Map<String, String>? headers,
          dynamic body,
          bool? shouldRefresh = true}) =>
      (super.noSuchMethod(
          Invocation.method(#post, [], {
            #url: url,
            #mapper: mapper,
            #shouldAuthorize: shouldAuthorize,
            #headers: headers,
            #body: body,
            #shouldRefresh: shouldRefresh
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_0())) as _i8.Future<_i2.Response>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i15.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Result> login(String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [username, password]),
          returnValue: Future<_i3.Result>.value(_FakeResult_1())) as _i8.Future<_i3.Result>);

  @override
  _i8.Future<_i3.Result> loginWithGoogle(String? url) => (super.noSuchMethod(Invocation.method(#loginWithGoogle, [url]),
      returnValue: Future<_i3.Result>.value(_FakeResult_1())) as _i8.Future<_i3.Result>);

  @override
  _i8.Future<_i3.Result> register(Map<String, dynamic>? newUserData) =>
      (super.noSuchMethod(Invocation.method(#register, [newUserData]),
          returnValue: Future<_i3.Result>.value(_FakeResult_1())) as _i8.Future<_i3.Result>);

  @override
  _i8.Future<_i3.DataResult<_i5.UserData>> getUserData() => (super.noSuchMethod(Invocation.method(#getUserData, []),
          returnValue: Future<_i3.DataResult<_i5.UserData>>.value(_FakeDataResult_2<_i5.UserData>()))
      as _i8.Future<_i3.DataResult<_i5.UserData>>);
}

/// A class which mocks [SkiLiftRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSkiLiftRepository extends _i1.Mock implements _i16.SkiLiftRepository {
  MockSkiLiftRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.DataResult<List<_i17.SkiLiftData>>> loadSkiLifts() =>
      (super.noSuchMethod(Invocation.method(#loadSkiLifts, []),
              returnValue:
                  Future<_i3.DataResult<List<_i17.SkiLiftData>>>.value(_FakeDataResult_2<List<_i17.SkiLiftData>>()))
          as _i8.Future<_i3.DataResult<List<_i17.SkiLiftData>>>);
}

/// A class which mocks [VoucherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVoucherRepository extends _i1.Mock implements _i18.VoucherRepository {
  MockVoucherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.DataResult<List<_i19.VoucherData>>> loadVouchers() =>
      (super.noSuchMethod(Invocation.method(#loadVouchers, []),
              returnValue:
                  Future<_i3.DataResult<List<_i19.VoucherData>>>.value(_FakeDataResult_2<List<_i19.VoucherData>>()))
          as _i8.Future<_i3.DataResult<List<_i19.VoucherData>>>);
}

/// A class which mocks [TicketRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicketRepository extends _i1.Mock implements _i20.TicketRepository {
  MockTicketRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.DataResult<List<_i21.TicketData>>> loadTicketsById(int? id) => (super.noSuchMethod(
          Invocation.method(#loadTicketsById, [id]),
          returnValue: Future<_i3.DataResult<List<_i21.TicketData>>>.value(_FakeDataResult_2<List<_i21.TicketData>>()))
      as _i8.Future<_i3.DataResult<List<_i21.TicketData>>>);
}
